// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: srrpBLJbTmEujuijFvad4R
// Component: KeCFdBe03ho3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: qGzDMkSYdsLj/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components";
import { RichList } from "@plasmicpkgs/plasmic-rich-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: srrpBLJbTmEujuijFvad4R/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: KeCFdBe03ho3/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  httpRestApiFetcher?: p.Flex<typeof DataFetcher>;
  restList1?: p.Flex<"div">;
  button?: p.Flex<typeof AntdButton>;
  titles?: p.Flex<"div">;
  descriptions?: p.Flex<"div">;
  table?: p.Flex<typeof RichTable>;
  dataList?: p.Flex<typeof RichList>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec(
          "selectedRowKeys",
          RichTable_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    queryRest: usePlasmicDataOp(() => {
      return {
        sourceId: "f2cyPKy8vCypEcGbsJHsWc",
        opId: "acb0f424-40b2-4ec0-a2ec-665d8b112f19",
        userArgs: {},
        cacheKey: `plasmic.$.acb0f424-40b2-4ec0-a2ec-665d8b112f19.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"try to list some content ..."}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1WIg
                      )}
                    >
                      {
                        "https://run.mocky.io/v3/a9c996c5-bbc5-46c9-bffe-322c945fb386\n"
                      }
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])([
                      2, 3, 4
                    ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <DataFetcher
                          data-plasmic-name={"httpRestApiFetcher"}
                          data-plasmic-override={overrides.httpRestApiFetcher}
                          body={undefined}
                          className={classNames(
                            "__wab_instance",
                            sty.httpRestApiFetcher
                          )}
                          dataName={"fetchedData"}
                          errorDisplay={
                            <ph.DataCtxReader>
                              {$ctx => "Error fetching data"}
                            </ph.DataCtxReader>
                          }
                          headers={{
                            "Content-Type": "application/json",
                            Accept: "application/json"
                          }}
                          key={currentIndex}
                          loadingDisplay={
                            <ph.DataCtxReader>
                              {$ctx => "Loading..."}
                            </ph.DataCtxReader>
                          }
                          method={"GET"}
                          noLayout={false}
                          queryKey={``}
                          url={
                            "https://run.mocky.io/v3/a9c996c5-bbc5-46c9-bffe-322c945fb386"
                          }
                        >
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                data-plasmic-name={"restList1"}
                                data-plasmic-override={overrides.restList1}
                                className={classNames(
                                  projectcss.all,
                                  sty.restList1
                                )}
                              >
                                <AntdButton
                                  data-plasmic-name={"button"}
                                  data-plasmic-override={overrides.button}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__kbo1A
                                    )}
                                  >
                                    {"Button"}
                                  </div>
                                </AntdButton>
                                <div
                                  data-plasmic-name={"titles"}
                                  data-plasmic-override={overrides.titles}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.titles
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.fetchedData.datalist[
                                          currentIndex
                                        ].title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={"descriptions"}
                                  data-plasmic-override={overrides.descriptions}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.descriptions
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.fetchedData.datalist[
                                          currentIndex
                                        ].description;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            )}
                          </ph.DataCtxReader>
                        </DataFetcher>
                      );
                    })}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wKsTx
                      )}
                    >
                      {"Now try it as table .."}
                    </div>
                    {(() => {
                      const child$Props = {
                        canSelectRows: "click",
                        className: classNames("__wab_instance", sty.table),
                        data: (() => {
                          try {
                            return $queries.queryRest;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onRowSelectionChanged: async (...eventArgs: any) => {
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKey",
                            ["table", "selectedRowKey"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRow",
                            ["table", "selectedRow"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRows",
                            ["table", "selectedRows"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKeys",
                            ["table", "selectedRowKeys"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                        },
                        scopeClassName: sty["table__instance"],
                        selectedRowKey: p.generateStateValueProp($state, [
                          "table",
                          "selectedRowKey"
                        ]),
                        selectedRowKeys: p.generateStateValueProp($state, [
                          "table",
                          "selectedRowKeys"
                        ]),
                        themeResetClassName: classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )
                      };
                      p.initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "selectedRowKey",
                            plasmicStateName: "table.selectedRowKey"
                          },
                          {
                            name: "selectedRow",
                            plasmicStateName: "table.selectedRow"
                          },
                          {
                            name: "selectedRows",
                            plasmicStateName: "table.selectedRows"
                          },
                          {
                            name: "selectedRowKeys",
                            plasmicStateName: "table.selectedRowKeys"
                          }
                        ],
                        [],
                        RichTable_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <RichTable
                          data-plasmic-name={"table"}
                          data-plasmic-override={overrides.table}
                          {...child$Props}
                        />
                      );
                    })()}
                  </section>
                  <RichList
                    data-plasmic-name={"dataList"}
                    data-plasmic-override={overrides.dataList}
                    bordered={true}
                    className={classNames("__wab_instance", sty.dataList)}
                    content={[{}]}
                    data={(() => {
                      try {
                        return $queries.queryRest;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    title={undefined}
                  />
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "httpRestApiFetcher",
    "restList1",
    "button",
    "titles",
    "descriptions",
    "table",
    "dataList"
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "httpRestApiFetcher",
    "restList1",
    "button",
    "titles",
    "descriptions",
    "table",
    "dataList"
  ],
  section: [
    "section",
    "h1",
    "httpRestApiFetcher",
    "restList1",
    "button",
    "titles",
    "descriptions",
    "table"
  ],
  h1: ["h1"],
  httpRestApiFetcher: [
    "httpRestApiFetcher",
    "restList1",
    "button",
    "titles",
    "descriptions"
  ],
  restList1: ["restList1", "button", "titles", "descriptions"],
  button: ["button"],
  titles: ["titles"],
  descriptions: ["descriptions"],
  table: ["table"],
  dataList: ["dataList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  h1: "h1";
  httpRestApiFetcher: typeof DataFetcher;
  restList1: "div";
  button: typeof AntdButton;
  titles: "div";
  descriptions: "div";
  table: typeof RichTable;
  dataList: typeof RichList;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"srrpBLJbTmEujuijFvad4R"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "srrpBLJbTmEujuijFvad4R"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    restList1: makeNodeComponent("restList1"),
    button: makeNodeComponent("button"),
    titles: makeNodeComponent("titles"),
    descriptions: makeNodeComponent("descriptions"),
    table: makeNodeComponent("table"),
    dataList: makeNodeComponent("dataList"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
